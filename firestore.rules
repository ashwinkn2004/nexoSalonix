rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ‚úÖ USERS: Each user can only access their own profile
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;

      // üîπ FAVOURITES: Subcollection - only owner can read/write
      match /favourites/{favId} {
        allow read, write: if request.auth.uid == userId;
      }
    }

    // ‚úÖ SALONS: Publicly readable, writable only by vendor who owns it
    match /salons/{salonId} {
      allow read: if true;
      allow create: if request.auth.uid != null; // vendor
      allow update, delete: if request.auth.uid == resource.data.ownerId;

      // üîπ SERVICES: Only salon owner can create/update/delete
      match /services/{serviceId} {
        allow read: if true;
        allow write: if request.auth.uid == get(/databases/$(database)/documents/salons/$(salonId)).data.ownerId;
      }

      // üîπ BARBERS: Only salon owner can create/update/delete
      match /barbers/{barberId} {
        allow read: if true;
        allow write: if request.auth.uid == get(/databases/$(database)/documents/salons/$(salonId)).data.ownerId;

        // üî∏ BARBER REVIEWS: Any logged-in user can post, only author can delete
        match /reviews/{reviewId} {
          allow read: if true;
          allow create: if request.auth.uid != null;
          allow delete: if request.auth.uid == resource.data.userId;
        }
      }

      // üîπ SALON REVIEWS (if applicable outside barbers): Same logic
      match /reviews/{reviewId} {
        allow read: if true;
        allow create: if request.auth.uid != null;
        allow delete: if request.auth.uid == resource.data.userId;
      }
    }

    // ‚úÖ BOOKINGS: Customers can only access their own bookings
   match /bookings/{bookingId} {
  // Customers can create their own bookings
  allow create: if request.auth.uid == request.resource.data.customerId;
	allow update: if request.auth.uid == resource.data.customerId;
  // Any logged-in user can read bookings (used to check slot availability)
  allow read: if request.auth.uid != null;
}

match /bookingLocks/{lockId} {
      // any authenticated user may create a lock
      allow create: if request.auth.uid != null;
      // allow reading so you can grey‚Äêout locked slots
      allow read:   if request.auth.uid != null;
      // (optional) allow delete if you ever want to remove a lock manually
      allow delete: if request.auth.uid != null;
    }

    // ‚úÖ PAYMENTS: Customer can create and view only their payments
    match /payments/{paymentId} {
      allow create: if request.auth.uid == request.resource.data.customerId;
      allow read, update: if request.auth.uid == resource.data.customerId;
    }

    // ‚úÖ NOTIFICATIONS: Only the intended recipient can read or update
    match /notifications/{notificationId} {
      allow create: if request.auth.uid != null;
      allow read, update: if request.auth.uid == resource.data.recipientId;
    }

    // ‚ùå DEFAULT DENY: Everything else is locked down
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
